<?php

declare(strict_types = 1);

namespace Crell\LiPHPe\Test;

use Crell\LiPHPe\Cell;

/**
 * Tests for the Cell class.
 */
class CellTest extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     *
     * @dataProvider updateValueProvider
     *
     *
     * @param $start
     *   The initial state of a Cell (or rather its mirror).
     * @param array $neighbors
     *   An array of a cell's neighbors.
     * @param $expected
     *   The expected state after a single generation.
     */
    public function testUpdateValue($start, array $neighbors, $expected)
    {
        // The state of the local cell doesn't matter, it's the mirror cell that matters.
        $c = new Cell($start, new Cell($start));

        $c->setSourceNeighbors($neighbors);
        $c->updateValue();

        $this->assertEquals($expected, $c->getState());
    }

    public function updateValueProvider()
    {
        return [
            // Empty, 1 neighbor
            ['E', [new Cell('E')], 'E'],
            // Empty, 2 neighbors
            ['E', [new Cell('E'), new Cell('1')], 'E'],
            ['E', [new Cell('1'), new Cell('1')], 'E'],
            // Empty, 3 neighbors
            ['E', [new Cell('1'), new Cell('1'), new Cell('1')], '1'],
            ['E', [new Cell('1'), new Cell('1'), new Cell('F')], '1'],
            // Empty, 4 neighbors
            ['E', [new Cell('1'), new Cell('1'), new Cell('1'), new Cell('E')], '1'], // Born from 3 neighbors
            ['E', [new Cell('1'), new Cell('2'), new Cell('1'), new Cell('R')], 'E'], // Hostile neighbor prevents birth
            // Living, 1 neighbor
            ['1', [new Cell('1')], 'E'],
            // Living, 2 neighbors
            ['1', [new Cell('1'), new Cell('1')], '1'],
            ['1', [new Cell('1'), new Cell('F')], '1'],
            // Living, 3 neighbors
            ['1', [new Cell('1'), new Cell('1'), new Cell('1')], '1'],
            ['1', [new Cell('1'), new Cell('1'), new Cell('F')], '1'],
            ['1', [new Cell('1'), new Cell('1'), new Cell('2')], '1'], // Still 2 friendly neighbors
            // Living, 4 neighbors
            ['1', [new Cell('1'), new Cell('1'), new Cell('1'), new Cell('1')], 'E'], # Die from over-population
            ['1', [new Cell('1'), new Cell('1'), new Cell('1'), new Cell('F')], '1'], # Food doesn't cause over-population
            // Rocks should always stay a rock
            ['R', [], 'R'],
            ['R', [new Cell('1'), new Cell('1'), new Cell('1'), new Cell('R')], 'R'],
            // Food should always stay food
            ['F', [], 'F'],
            ['F', [new Cell('1'), new Cell('1'), new Cell('1'), new Cell('R')], 'F'],
        ];
    }
}
